/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,28],$V2=[1,12],$V3=[1,13],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,29],$Va=[1,30],$Vb=[1,31],$Vc=[1,37],$Vd=[1,38],$Ve=[1,39],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[2,5,9,17,19,20,38,39,40,41,42,50,62,63,76,77,78,80,83,86,88,89,90,91],$Vl=[1,62],$Vm=[1,63],$Vn=[1,84],$Vo=[1,81],$Vp=[1,80],$Vq=[1,82],$Vr=[1,83],$Vs=[1,85],$Vt=[1,86],$Vu=[1,87],$Vv=[1,88],$Vw=[1,89],$Vx=[1,90],$Vy=[1,97],$Vz=[10,37,43],$VA=[2,28],$VB=[1,119],$VC=[1,116],$VD=[1,117],$VE=[1,118],$VF=[10,26],$VG=[1,133],$VH=[1,134],$VI=[1,135],$VJ=[1,136],$VK=[1,137],$VL=[1,138],$VM=[1,139],$VN=[1,140],$VO=[1,141],$VP=[1,142],$VQ=[1,143],$VR=[1,144],$VS=[10,26,37,53,54,55,56,57,58,65,66,67,68,69,70,74,75,87],$VT=[10,26,74,75],$VU=[2,8,9,17,20,38,39,40,41,42,50,62,63,76,77,78,80,83,89,90,91],$VV=[1,173],$VW=[1,174],$VX=[1,175],$VY=[1,176],$VZ=[1,177],$V_=[1,193],$V$=[26,37],$V01=[1,222],$V11=[1,231],$V21=[10,26,37,53,54,65,66,67,68,69,70,74,75,87],$V31=[10,26,37,53,54,55,56,58,65,66,67,68,69,70,74,75,87],$V41=[1,284],$V51=[1,285],$V61=[1,293],$V71=[1,292],$V81=[19,86,88],$V91=[1,319],$Va1=[1,322],$Vb1=[26,54],$Vc1=[1,334];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"inicio":4,"EOF":5,"importes":6,"instrucciones":7,"RIMPORT":8,"ID":9,"PUNTOYCOMA":10,"instruccion":11,"declaracion":12,"asignacion":13,"declaracion_asignacion":14,"declaracion_funcion":15,"declaracion_metodo":16,"RCLASS":17,"LLAVIZQ":18,"LLAVDER":19,"RSYSTEM":20,"PUNTO":21,"ROUT":22,"RPRINT":23,"PARIZQ":24,"salida":25,"PARDER":26,"RPRINTLN":27,"llamada_funcion":28,"incremento_decremento":29,"bloque_if":30,"bloque_switch":31,"bloque_while":32,"bloque_dowhile":33,"bloque_for":34,"sentencias_transferencia":35,"lista_id":36,"COMA":37,"RINT":38,"RDOUBLE":39,"RBOOLEAN":40,"RCHAR":41,"RSTRING":42,"IGUAL":43,"expresion_numerica":44,"expresion_logica":45,"CARACTER":46,"asignacion_simple":47,"declaracion_asignacion_simple":48,"parametros":49,"RVOID":50,"RMAIN":51,"lista_parametros":52,"OPMENOS":53,"OPMAS":54,"OPDIVISION":55,"OPMOD":56,"OPCIRCU":57,"OPMULTI":58,"ENTERO":59,"DECIMAL":60,"CADENA":61,"DECREMENTO":62,"INCREMENTO":63,"expresion_relacional":64,"MAYOR":65,"MENOR":66,"MAYORIG":67,"MENORIG":68,"DIGUAL":69,"NIGUAL":70,"RTRUE":71,"RFALSE":72,"NOT":73,"AND":74,"OR":75,"RBREAK":76,"RCONTINUE":77,"RRETURN":78,"tipo":79,"RIF":80,"bloque_else":81,"RELSE":82,"RSWITCH":83,"casos":84,"caso":85,"RCASE":86,"DOSPUNTOS":87,"RDEFAULT":88,"RWHILE":89,"RDO":90,"RFOR":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"RIMPORT",9:"ID",10:"PUNTOYCOMA",17:"RCLASS",18:"LLAVIZQ",19:"LLAVDER",20:"RSYSTEM",21:"PUNTO",22:"ROUT",23:"RPRINT",24:"PARIZQ",26:"PARDER",27:"RPRINTLN",37:"COMA",38:"RINT",39:"RDOUBLE",40:"RBOOLEAN",41:"RCHAR",42:"RSTRING",43:"IGUAL",46:"CARACTER",50:"RVOID",51:"RMAIN",53:"OPMENOS",54:"OPMAS",55:"OPDIVISION",56:"OPMOD",57:"OPCIRCU",58:"OPMULTI",59:"ENTERO",60:"DECIMAL",61:"CADENA",62:"DECREMENTO",63:"INCREMENTO",65:"MAYOR",66:"MENOR",67:"MAYORIG",68:"MENORIG",69:"DIGUAL",70:"NIGUAL",71:"RTRUE",72:"RFALSE",73:"NOT",74:"AND",75:"OR",76:"RBREAK",77:"RCONTINUE",78:"RRETURN",80:"RIF",82:"RELSE",83:"RSWITCH",86:"RCASE",87:"DOSPUNTOS",88:"RDEFAULT",89:"RWHILE",90:"RDO",91:"RFOR"},
productions_: [0,[3,2],[4,2],[4,1],[6,4],[6,3],[7,2],[7,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,5],[11,9],[11,9],[11,8],[11,1],[11,2],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,2],[11,2],[36,3],[36,1],[12,3],[12,3],[12,3],[12,3],[12,3],[13,4],[13,4],[14,5],[14,5],[14,5],[14,5],[14,5],[47,3],[48,4],[15,8],[15,8],[15,8],[15,8],[15,8],[15,7],[15,7],[15,7],[15,7],[15,7],[16,8],[16,8],[16,7],[16,7],[28,5],[28,4],[44,2],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,1],[44,1],[44,1],[44,4],[44,3],[44,1],[44,2],[44,2],[44,2],[44,2],[44,2],[44,2],[44,2],[44,2],[44,2],[44,2],[44,2],[44,2],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,1],[64,1],[64,3],[64,2],[45,3],[45,3],[45,1],[29,2],[29,2],[29,2],[29,2],[35,2],[35,2],[35,2],[35,3],[35,3],[35,3],[49,4],[49,2],[52,3],[52,3],[52,3],[52,3],[52,1],[52,1],[52,1],[52,1],[79,1],[79,1],[79,1],[79,1],[79,1],[25,3],[25,3],[25,6],[25,5],[25,1],[25,1],[25,4],[25,3],[30,7],[30,8],[81,4],[81,8],[81,9],[31,7],[84,2],[84,1],[85,4],[85,3],[32,7],[33,9],[34,11],[34,11]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
AST_Tools.resetErrors();return $$[$0-1];
break;
case 2:
this.$=AST_Tools.BloquePrincipal($$[$0-1],$$[$0]);
break;
case 3:
this.$=AST_Tools.BloquePrincipal(undefined,$$[$0]);
break;
case 4:
$$[$0-3].push($$[$0-1]);
break;
case 5:
this.$=AST_Tools.listaIDImportes($$[$0-1]);
break;
case 6:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7:
 this.$ = [$$[$0]]; 
break;
case 8: case 9: case 10: case 11:
this.$=$$[$0]
break;
case 13:
this.$=AST_Tools.bloqueCLASE($$[$0-3],$$[$0-1]);
break;
case 14: case 15:
this.$=AST_Tools.sentenciaPrint($$[$0-2]);
break;
case 16:
this.$=AST_Tools.sentenciaPrint("\n");
break;
case 25: case 26:
 AST_Tools.addErrorSintactico(yytext,this._$.first_line,this._$.first_column); 
break;
case 27:
$$[$0-2].push($$[$0]);
break;
case 28:
this.$=AST_Tools.listaID($$[$0]);
break;
case 29:
 this.$ = AST_Tools.declaracion($$[$0-1], Tipo_Valor.NUMERO); 
break;
case 30:
 this.$ = AST_Tools.declaracion($$[$0-1], Tipo_Valor.DECIMAL); 
break;
case 31:
 this.$ = AST_Tools.declaracion($$[$0-1], Tipo_Valor.BOOLEANO); 
break;
case 32:
 this.$ = AST_Tools.declaracion($$[$0-1], Tipo_Valor.CARACTER); 
break;
case 33:
 this.$ = AST_Tools.declaracion($$[$0-1], Tipo_Valor.CADENA); 
break;
case 34: case 35:
 this.$ = AST_Tools.asignacion($$[$0-3], $$[$0-1]); 
break;
case 36:
 this.$ = AST_Tools.asignacion_declaracion($$[$0-1],$$[$0-3], Tipo_Valor.NUMERO);
break;
case 37:
 this.$ = AST_Tools.asignacion_declaracion($$[$0-1],$$[$0-3], Tipo_Valor.DECIMAL);
break;
case 38:
 this.$ = AST_Tools.asignacion_declaracion($$[$0-1],$$[$0-3], Tipo_Valor.BOOLEANO);
break;
case 39:
 this.$ = AST_Tools.asignacion_declaracion($$[$0-1],$$[$0-3], Tipo_Valor.CARACTER);
break;
case 40:
 this.$ = AST_Tools.asignacion_declaracion($$[$0-1],$$[$0-3], Tipo_Valor.CADENA);
break;
case 41:
 this.$ = AST_Tools.asignacion($$[$0-2], $$[$0]); 
break;
case 42:
 this.$ = AST_Tools.asignacion_declaracion($$[$0], Tipo_Valor.NUMERO);
break;
case 43:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.NUMERO,$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 44:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.DECIMAL,$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 45:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.BOOLEANO,$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 46:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.CARACTER,$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 47:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.CADENA,$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 48:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.NUMERO,$$[$0-5],undefined,$$[$0-1]);
break;
case 49:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.DECIMAL,$$[$0-5],undefined,$$[$0-1]);
break;
case 50:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.BOOLEANO,$$[$0-5],undefined,$$[$0-1]);
break;
case 51:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.CARACTER,$$[$0-5],undefined,$$[$0-1]);
break;
case 52:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.CADENA,$$[$0-5],undefined,$$[$0-1]);
break;
case 53:
 this.$ = AST_Tools.nuevoMetodo($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 54:
 this.$ = AST_Tools.nuevoMetodoMain($$[$0-4],$$[$0-1]);
break;
case 55:
 this.$ = AST_Tools.nuevoMetodo($$[$0-5],undefined,$$[$0-1]);
break;
case 56:
 this.$ = AST_Tools.nuevoMetodoMain(undefined,$$[$0-1]);
break;
case 57:
this.$=AST_Tools.llamadaFuncion($$[$0-4],$$[$0-2]);
break;
case 58:
this.$=AST_Tools.llamadaFuncion($$[$0-3],undefined);
break;
case 59:
 this.$ = AST_Tools.operacionUnaria ($$[$0], Tipo_Operacion.NEGATIVO); 
break;
case 60:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.RESTA);
break;
case 61:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.SUMA);
break;
case 62:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.DIVISON);
break;
case 63:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MODULO);
break;
case 64:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.POTENCIA);
break;
case 65:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MULTIPLICACION);
break;
case 66:
 this.$ = $$[$0-1]; 
break;
case 67:
 this.$ = AST_Tools.crearValor(Number($$[$0]),Tipo_Valor.NUMERO); 
break;
case 68:
 this.$ = AST_Tools.crearValor(Number($$[$0]),Tipo_Valor.DECIMAL); 
break;
case 69:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.ID); 
break;
case 70:
 this.$ = AST_Tools.llamadaFuncion($$[$0-3],$$[$0-1]);
break;
case 71:
 this.$ = AST_Tools.llamadaFuncion($$[$0-2],undefined);
break;
case 72:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.CADENA); 
break;
case 73: case 74:
 this.$ = AST_Tools.operacionUnaria (Number($$[$0]), Tipo_Operacion.DECREMENTO); 
break;
case 75: case 98:
 this.$ = AST_Tools.operacionUnaria ($$[$0], Tipo_Operacion.DECREMENTO); 
break;
case 76: case 77:
 this.$ = AST_Tools.operacionUnaria (Number($$[$0]), Tipo_Operacion.INCREMENTO); 
break;
case 78: case 99:
 this.$ = AST_Tools.operacionUnaria ($$[$0], Tipo_Operacion.INCREMENTO); 
break;
case 79: case 100:
 this.$ = AST_Tools.operacionUnaria ($$[$0-1], Tipo_Operacion.DECREMENTO); 
break;
case 80: case 81:
 this.$ = AST_Tools.operacionUnaria (Number($$[$0-1]), Tipo_Operacion.DECREMENTO); 
break;
case 82: case 101:
 this.$ = AST_Tools.operacionUnaria ($$[$0-1], Tipo_Operacion.INCREMENTO); 
break;
case 83: case 84:
 this.$ = AST_Tools.operacionUnaria (Number($$[$0-1]), Tipo_Operacion.INCREMENTO); 
break;
case 85:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MAYOR_QUE);
break;
case 86:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MENOR_QUE);
break;
case 87:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MAYOR_IGUAL);
break;
case 88:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MENOR_IGUAL);
break;
case 89:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.DOBLE_IGUAL);
break;
case 90:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.NO_IGUAL);
break;
case 91: case 92:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.BOOLEANO);
break;
case 93:
 this.$ = $$[$0-1]
break;
case 94:
 this.$ = AST_Tools.operacionUnaria ($$[$0],Tipo_Operacion.NOT);
break;
case 95:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.AND);
break;
case 96:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.OR);
break;
case 97:
 this.$ = $$[$0]
break;
case 102:
this.$=AST_Tools.nuevoBREAK();
break;
case 103:
this.$=AST_Tools.nuevoCONTINUE();
break;
case 104:
this.$=AST_Tools.nuevoRETURN(undefined,undefined);
break;
case 105:
this.$=AST_Tools.nuevoRETURN($$[$0-1],Tipo_Valor.BOOLEANO);
break;
case 106:
this.$=AST_Tools.nuevoRETURN($$[$0-1],Tipo_Valor.NUMERO);
break;
case 107:
this.$=AST_Tools.nuevoRETURN($$[$0-1],Tipo_Valor.CARACTER);
break;
case 108:
$$[$0-3].push(AST_Tools.nuevoParametro($$[$0-1],$$[$0]));
break;
case 109:
this.$=AST_Tools.listaParametros(AST_Tools.nuevoParametro($$[$0-1],$$[$0]));
break;
case 110:
$$[$0-2].push(AST_Tools.nuevoParametro(undefined,$$[$0]));
break;
case 111:
$$[$0-2].push(AST_Tools.nuevoParametro(Tipo_Valor.CARACTER,$$[$0]));
break;
case 112: case 113:
$$[$0-2].push(AST_Tools.nuevoParametro(Tipo_Valor.BOOLEANO,$$[$0]));
break;
case 114:
this.$=AST_Tools.listaParametros(AST_Tools.nuevoParametro(undefined,$$[$0]));
break;
case 115:
this.$=AST_Tools.listaParametros(AST_Tools.nuevoParametro(Tipo_Valor.CARACTER,$$[$0]));
break;
case 116: case 117:
this.$=AST_Tools.listaParametros(AST_Tools.nuevoParametro(Tipo_Valor.BOOLEANO,$$[$0]));
break;
case 118:
this.$=Tipo_Valor.NUMERO;
break;
case 119:
this.$=Tipo_Valor.DECIMAL;
break;
case 120:
this.$=Tipo_Valor.BOOLEANO;
break;
case 121:
this.$=Tipo_Valor.CARACTER;
break;
case 122:
this.$=Tipo_Valor.CADENA;
break;
case 123:
$$[$0-2].push(AST_Tools.salida(Tipo_Valor.CADENA,$$[$0]));
break;
case 124:
$$[$0-2].push(AST_Tools.salida(Tipo_Valor.ID,$$[$0]));
break;
case 125:
$$[$0-5].push(AST_Tools.llamadaFuncion($$[$0-3],$$[$0-1]));
break;
case 126:
$$[$0-4].push(AST_Tools.llamadaFuncion($$[$0-2],undefined));
break;
case 127:
this.$=AST_Tools.listaSalidas(AST_Tools.salida(Tipo_Valor.CADENA,$$[$0]));
break;
case 128:
this.$=AST_Tools.listaSalidas(AST_Tools.salida(Tipo_Valor.ID,$$[$0]));
break;
case 129:
this.$=AST_Tools.listaSalidas(AST_Tools.llamadaFuncion($$[$0-3],$$[$0-1]));
break;
case 130:
this.$=AST_Tools.listaSalidas(AST_Tools.llamadaFuncion($$[$0-2],undefined));
break;
case 131: case 134:
this.$= AST_Tools.nuevoIF($$[$0-4],$$[$0-1]);
break;
case 132: case 135:
this.$= AST_Tools.nuevoIF_ELSE($$[$0-5],$$[$0-2],$$[$0])
break;
case 133:
this.$= $$[$0-1]
break;
case 136:
this.$=AST_Tools.nuevoSWITCH($$[$0-4],$$[$0-1]);
break;
case 137:
$$[$0-1].push($$[$0]);
break;
case 138:
this.$=AST_Tools.listaCasos($$[$0]);
break;
case 139:
this.$=AST_Tools.nuevoCaso($$[$0-2],$$[$0]);
break;
case 140:
this.$=AST_Tools.nuevoCasoDefault($$[$0]);
break;
case 141:
this.$= AST_Tools.nuevoWHILE($$[$0-4],$$[$0-1]);
break;
case 142:
this.$= AST_Tools.nuevoDO_WHILE($$[$0-3],$$[$0-6]);
break;
case 143: case 144:
this.$=AST_Tools.nuevoFOR($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:[1,5],9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{1:[3]},{5:[1,40]},{2:$V0,7:41,8:[1,42],9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{2:$V0,5:[2,3],9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{9:[1,44]},o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,9]),o($Vk,[2,10]),o($Vk,[2,11]),o($Vk,[2,12]),{9:[1,45]},{21:[1,46]},o($Vk,[2,17]),{10:[1,47]},o($Vk,[2,19]),o($Vk,[2,20]),o($Vk,[2,21]),o($Vk,[2,22]),o($Vk,[2,23]),o($Vk,[2,24]),{10:[1,48],19:[1,49]},{9:[1,51],36:50},{9:[1,53],36:52},{9:[1,55],36:54},{9:[1,57],36:56},{9:[1,59],36:58},{24:[1,61],43:[1,60],62:$Vl,63:$Vm},{9:[1,64],51:[1,65]},{9:[1,66]},{9:[1,67]},{24:[1,68]},{24:[1,69]},{24:[1,70]},{18:[1,71]},{24:[1,72]},{10:[1,73]},{10:[1,74]},{9:$Vn,10:[1,75],24:$Vo,44:77,45:76,46:[1,78],53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:79,71:$Vv,72:$Vw,73:$Vx},{1:[2,1]},{2:$V0,5:[2,2],9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{9:[1,91]},o($Vk,[2,6]),{10:[1,92]},{18:[1,93]},{22:[1,94]},o($Vk,[2,18]),o($Vk,[2,25]),o($Vk,[2,26]),{10:[1,95],37:$Vy,43:[1,96]},o($Vz,$VA,{24:[1,98]}),{10:[1,99],37:$Vy,43:[1,100]},o($Vz,$VA,{24:[1,101]}),{10:[1,102],37:$Vy,43:[1,103]},o($Vz,$VA,{24:[1,104]}),{10:[1,105],37:$Vy,43:[1,106]},o($Vz,$VA,{24:[1,107]}),{10:[1,108],37:$Vy,43:[1,109]},o($Vz,$VA,{24:[1,110]}),{9:$Vn,24:$Vo,44:111,45:112,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:79,71:$Vv,72:$Vw,73:$Vx},{9:$Vn,24:$VB,26:[1,114],44:115,46:$VC,52:113,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,71:$VD,72:$VE},o($VF,[2,100]),o($VF,[2,101]),{24:[1,120]},{24:[1,121]},o($VF,[2,98]),o($VF,[2,99]),{9:$Vn,24:$Vo,44:123,45:122,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:79,71:$Vv,72:$Vw,73:$Vx},{9:$Vn,24:$VB,44:124,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},{9:$Vn,24:$Vo,44:123,45:125,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:79,71:$Vv,72:$Vw,73:$Vx},{2:$V0,7:126,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{9:[1,129],38:[1,130],47:127,48:128},o($Vk,[2,102]),o($Vk,[2,103]),o($Vk,[2,104]),{10:[1,131]},{10:[1,132],53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},{10:[1,145]},o($VF,[2,97],{74:[1,146],75:[1,147]}),{9:$Vn,24:$VB,44:148,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},{9:$Vn,24:$Vo,44:149,45:150,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:79,71:$Vv,72:$Vw,73:$Vx},o($VS,[2,67],{62:[1,151],63:[1,152]}),o($VS,[2,68],{62:[1,153],63:[1,154]}),o($VS,[2,69],{24:[1,155],62:[1,156],63:[1,157]}),o($VS,[2,72]),{9:[1,160],59:[1,158],60:[1,159]},{9:[1,163],59:[1,161],60:[1,162]},o($VT,[2,91]),o($VT,[2,92]),{9:$Vn,24:$Vo,44:123,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:164,71:$Vv,72:$Vw,73:$Vx},{10:[1,165]},o($VU,[2,5]),{2:$V0,7:166,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{21:[1,167]},o($Vk,[2,29]),{9:$Vn,24:$VB,44:168,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},{9:[1,169]},{26:[1,171],38:$VV,39:$VW,40:$VX,41:$VY,42:$VZ,49:170,79:172},o($Vk,[2,30]),{9:$Vn,24:$VB,44:178,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},{26:[1,180],38:$VV,39:$VW,40:$VX,41:$VY,42:$VZ,49:179,79:172},o($Vk,[2,31]),{9:$Vn,24:$Vo,44:123,45:181,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:79,71:$Vv,72:$Vw,73:$Vx},{26:[1,183],38:$VV,39:$VW,40:$VX,41:$VY,42:$VZ,49:182,79:172},o($Vk,[2,32]),{46:[1,184]},{26:[1,186],38:$VV,39:$VW,40:$VX,41:$VY,42:$VZ,49:185,79:172},o($Vk,[2,33]),{9:$Vn,24:$VB,44:187,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},{26:[1,189],38:$VV,39:$VW,40:$VX,41:$VY,42:$VZ,49:188,79:172},{10:[1,190],53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},{10:[1,191]},{26:[1,192],37:$V_},{10:[1,194]},o($V$,[2,114],{53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL}),o($V$,[2,115]),o($V$,[2,116]),o($V$,[2,117]),{9:$Vn,24:$VB,44:195,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},{26:[1,197],38:$VV,39:$VW,40:$VX,41:$VY,42:$VZ,49:196,79:172},{26:[1,199],38:$VV,39:$VW,40:$VX,41:$VY,42:$VZ,49:198,79:172},{26:[1,200]},{53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},{26:[1,201],53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL},{26:[1,202]},{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,203],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{10:[1,204]},{10:[1,205]},{43:[1,206]},{9:[1,207]},o($Vk,[2,105]),o($Vk,[2,106]),{9:$Vn,24:$VB,44:208,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},{9:$Vn,24:$VB,44:209,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},{9:$Vn,24:$VB,44:210,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},{9:$Vn,24:$VB,44:211,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},{9:$Vn,24:$VB,44:212,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},{9:$Vn,24:$VB,44:213,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},{9:$Vn,24:$VB,44:214,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},{9:$Vn,24:$VB,44:215,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},{9:$Vn,24:$VB,44:216,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},{9:$Vn,24:$VB,44:217,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},{9:$Vn,24:$VB,44:218,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},{9:$Vn,24:$VB,44:219,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},o($Vk,[2,107]),{9:$Vn,24:$Vo,44:123,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:220,71:$Vv,72:$Vw,73:$Vx},{9:$Vn,24:$Vo,44:123,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:221,71:$Vv,72:$Vw,73:$Vx},o($VS,[2,59]),{26:$V01,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},{26:[1,223]},o($VS,[2,80]),o($VS,[2,83]),o($VS,[2,81]),o($VS,[2,84]),{9:$Vn,24:$VB,26:[1,225],44:115,46:$VC,52:224,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,71:$VD,72:$VE},o($VS,[2,79]),o($VS,[2,82]),o($VS,[2,73]),o($VS,[2,74]),o($VS,[2,75]),o($VS,[2,76]),o($VS,[2,77]),o($VS,[2,78]),o($VT,[2,94]),o($VU,[2,4]),{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,226],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{23:[1,227],27:[1,228]},{10:[1,229],53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL},o($Vz,[2,27]),{26:[1,230],37:$V11},{18:[1,232]},{9:[1,233]},{9:[2,118]},{9:[2,119]},{9:[2,120]},{9:[2,121]},{9:[2,122]},{10:[1,234],53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL},{26:[1,235],37:$V11},{18:[1,236]},{10:[1,237]},{26:[1,238],37:$V11},{18:[1,239]},{10:[1,240]},{26:[1,241],37:$V11},{18:[1,242]},{10:[1,243],53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL},{26:[1,244],37:$V11},{18:[1,245]},o($Vk,[2,34]),o($Vk,[2,35]),{10:[1,246]},{9:$Vn,24:$VB,44:247,46:[1,248],53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,71:[1,249],72:[1,250]},o($Vk,[2,58]),{26:$V01,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL},{26:[1,251],37:$V11},{18:[1,252]},{26:[1,253],37:$V11},{18:[1,254]},{18:[1,255]},{18:[1,256]},{18:[1,257]},{89:[1,258]},{9:$Vn,24:$Vo,44:123,45:259,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:79,71:$Vv,72:$Vw,73:$Vx},{9:$Vn,24:$Vo,44:123,45:260,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:79,71:$Vv,72:$Vw,73:$Vx},{9:$Vn,24:$VB,44:261,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},{43:[1,262]},o($V21,[2,60],{55:$VI,56:$VJ,57:$VK,58:$VL}),o($V21,[2,61],{55:$VI,56:$VJ,57:$VK,58:$VL}),o($V31,[2,62],{57:$VK}),o($V31,[2,63],{57:$VK}),o($VS,[2,64]),o($V31,[2,65],{57:$VK}),o($VT,[2,85],{53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL}),o($VT,[2,86],{53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL}),o($VT,[2,87],{53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL}),o($VT,[2,88],{53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL}),o($VT,[2,89],{53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL}),o($VT,[2,90],{53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL}),o($VF,[2,95]),o($VF,[2,96]),o($VS,[2,66]),o($VT,[2,93]),{26:[1,263],37:$V_},o($VS,[2,71]),o($Vk,[2,13]),{24:[1,264]},{24:[1,265]},o($Vk,[2,36]),{18:[1,266]},{38:$VV,39:$VW,40:$VX,41:$VY,42:$VZ,79:267},{2:$V0,7:268,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},o($V$,[2,109]),o($Vk,[2,37]),{18:[1,269]},{2:$V0,7:270,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},o($Vk,[2,38]),{18:[1,271]},{2:$V0,7:272,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},o($Vk,[2,39]),{18:[1,273]},{2:$V0,7:274,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},o($Vk,[2,40]),{18:[1,275]},{2:$V0,7:276,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},o($Vk,[2,57]),o($V$,[2,110],{53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL}),o($V$,[2,111]),o($V$,[2,112]),o($V$,[2,113]),{18:[1,277]},{2:$V0,7:278,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{18:[1,279]},{2:$V0,7:280,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{2:$V0,7:281,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{84:282,85:283,86:$V41,88:$V51},{2:$V0,7:286,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{24:[1,287]},{10:[1,288]},{10:[1,289]},{10:[2,41],53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL},{9:$Vn,24:$VB,44:290,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},o($VS,[2,70]),{9:$V61,25:291,61:$V71},{9:$V61,25:294,26:[1,295],61:$V71},{2:$V0,7:296,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{9:[1,297]},{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,298],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{2:$V0,7:299,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,300],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{2:$V0,7:301,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,302],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{2:$V0,7:303,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,304],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{2:$V0,7:305,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,306],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{2:$V0,7:307,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,308],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{2:$V0,7:309,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,310],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,311],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{19:[1,312],85:313,86:$V41,88:$V51},o($V81,[2,138]),{9:$Vn,24:$VB,44:314,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu},{87:[1,315]},{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,316],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{9:$Vn,24:$Vo,44:123,45:317,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:79,71:$Vv,72:$Vw,73:$Vx},{9:$V91,29:318,62:$Va,63:$Vb},{9:$V91,29:320,62:$Va,63:$Vb},{10:[2,42],53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL},{26:[1,321],54:$Va1},o($Vb1,[2,127]),o($Vb1,[2,128],{24:[1,323]}),{26:[1,324],54:$Va1},{10:[1,325]},{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,326],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},o($V$,[2,108]),o($Vk,[2,48]),{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,327],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},o($Vk,[2,49]),{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,328],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},o($Vk,[2,50]),{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,329],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},o($Vk,[2,51]),{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,330],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},o($Vk,[2,52]),{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,331],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},o($Vk,[2,55]),{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,332],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},o($Vk,[2,56]),o($Vk,[2,131],{81:333,82:$Vc1}),o($Vk,[2,136]),o($V81,[2,137]),{53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,87:[1,335]},{2:$V0,7:336,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},o($Vk,[2,141]),{26:[1,337]},{26:[1,338]},{62:$Vl,63:$Vm},{26:[1,339]},{10:[1,340]},{9:[1,342],61:[1,341]},{9:$Vn,24:$VB,26:[1,344],44:115,46:$VC,52:343,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,71:$VD,72:$VE},{10:[1,345]},o($Vk,[2,16]),o($Vk,[2,43]),o($Vk,[2,44]),o($Vk,[2,45]),o($Vk,[2,46]),o($Vk,[2,47]),o($Vk,[2,53]),o($Vk,[2,54]),o($Vk,[2,132]),{18:[1,346],80:[1,347]},{2:$V0,7:348,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},o($V81,[2,140],{12:7,13:8,14:9,15:10,16:11,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,11:43,2:$V0,9:$V1,17:$V2,20:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj}),{10:[1,349]},{18:[1,350]},{18:[1,351]},o($Vk,[2,14]),o($Vb1,[2,123]),o($Vb1,[2,124],{24:[1,352]}),{26:[1,353],37:$V_},o($Vb1,[2,130]),o($Vk,[2,15]),{2:$V0,7:354,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{24:[1,355]},o($V81,[2,139],{12:7,13:8,14:9,15:10,16:11,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,11:43,2:$V0,9:$V1,17:$V2,20:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj}),o($Vk,[2,142]),{2:$V0,7:356,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{2:$V0,7:357,9:$V1,11:6,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{9:$Vn,24:$VB,26:[1,359],44:115,46:$VC,52:358,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,71:$VD,72:$VE},o($Vb1,[2,129]),{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,360],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{9:$Vn,24:$Vo,44:123,45:361,53:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:79,71:$Vv,72:$Vw,73:$Vx},{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,362],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{2:$V0,9:$V1,11:43,12:7,13:8,14:9,15:10,16:11,17:$V2,19:[1,363],20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{26:[1,364],37:$V_},o($Vb1,[2,126]),o($Vk,[2,133]),{26:[1,365]},o($Vk,[2,143]),o($Vk,[2,144]),o($Vb1,[2,125]),{18:[1,366]},{2:$V0,9:$V1,11:367,12:7,13:8,14:9,15:10,16:11,17:$V2,20:$V3,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,50:$V9,62:$Va,63:$Vb,76:$Vc,77:$Vd,78:$Ve,80:$Vf,83:$Vg,89:$Vh,90:$Vi,91:$Vj},{19:[1,368]},o($Vk,[2,134],{81:369,82:$Vc1}),o($Vk,[2,135])],
defaultActions: {40:[2,1],173:[2,118],174:[2,119],175:[2,120],176:[2,121],177:[2,122]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Tipo_Operacion	= require('./instrucciones.js').Tipo_Operacion;
	const Tipo_Valor 	    = require('./instrucciones.js').Tipo_Valor;
	const AST_Tools     	= require('./instrucciones.js').AST_Tools;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"lex":true,"case-sensitive":true,"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ingorar Espacion */
break;
case 1:/* Comentario Simple */
break;
case 2:/* Comentario Multiple */
break;
case 3:return 38;
break;
case 4:return 39;
break;
case 5:return 40;
break;
case 6:return 41;
break;
case 7:return 42;
break;
case 8:return 42;
break;
case 9:return 55;
break;
case 10:return 58;
break;
case 11:return 56;
break;
case 12:return 62;
break;
case 13:return 53;
break;
case 14:return 63;
break;
case 15:return 54;
break;
case 16:return 57;
break;
case 17:return 24;
break;
case 18:return 26;
break;
case 19:return 18;
break;
case 20:return 19;
break;
case 21:return 68;
break;
case 22:return 67;
break;
case 23:return 66;
break;
case 24:return 65;
break;
case 25:return 69;
break;
case 26:return 43;
break;
case 27:return 70;
break;
case 28:return 73;
break;
case 29:return 10;
break;
case 30:return 37;
break;
case 31:return 87;
break;
case 32:return 74;
break;
case 33:return 75;
break;
case 34:return 17;
break;
case 35:return 8;
break;
case 36:return 71;
break;
case 37:return 72;
break;
case 38:return 80;
break;
case 39:return 82;
break;
case 40:return 83;
break;
case 41:return 86;
break;
case 42:return 88;
break;
case 43:return 89;
break;
case 44:return 90;
break;
case 45:return 91;
break;
case 46:return 76;
break;
case 47:return 77;
break;
case 48:return 78;
break;
case 49:return 50;
break;
case 50:return 51;
break;
case 51:return 20;
break;
case 52:return 21;
break;
case 53:return 22;
break;
case 54:return 23;
break;
case 55:return 27;
break;
case 56:return 8;
break;
case 57:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 46;
break;
case 58:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 61;
break;
case 59:return 60;
break;
case 60:return 59;
break;
case 61:return 9;
break;
case 62:return 5;
break;
case 63:AST_Tools.addErrorLexico(yy_.yytext,yy_.yylineno+1); return '';
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][\*][^\*]*[\*][\/])/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:string\b)/,/^(?:\/)/,/^(?:\*)/,/^(?:%)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:!)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:System\b)/,/^(?:\.)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:import\b)/,/^(?:'(\\n|\\t|\\r|\\"|\\'|[^\'])')/,/^(?:"(\\"|[^\"])*")/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z_0-9]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}