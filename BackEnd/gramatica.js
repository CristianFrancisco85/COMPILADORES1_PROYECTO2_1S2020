/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,19],$V5=[1,20],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[1,25],$Ve=[1,26],$Vf=[1,27],$Vg=[1,28],$Vh=[1,29],$Vi=[2,5,12,13,15,20,34,35,36,37,38,47,73,74,75,77,80,83,85,86,87,88],$Vj=[1,69],$Vk=[1,65],$Vl=[1,72],$Vm=[1,66],$Vn=[1,67],$Vo=[1,68],$Vp=[1,70],$Vq=[1,71],$Vr=[1,73],$Vs=[1,74],$Vt=[1,64],$Vu=[1,78],$Vv=[1,81],$Vw=[1,82],$Vx=[1,79],$Vy=[1,80],$Vz=[1,83],$VA=[1,84],$VB=[1,91],$VC=[19,33,39],$VD=[2,23],$VE=[1,110],$VF=[1,120],$VG=[1,119],$VH=[1,121],$VI=[1,122],$VJ=[1,123],$VK=[1,124],$VL=[1,125],$VM=[1,126],$VN=[1,127],$VO=[1,128],$VP=[1,129],$VQ=[1,130],$VR=[1,132],$VS=[18,19],$VT=[18,19,49,51,52,53,54,55,61,62,63,64,65,66,69,70,84],$VU=[19,49],$VV=[18,19,69,70],$VW=[1,154],$VX=[18,33],$VY=[1,165],$VZ=[1,166],$V_=[1,167],$V$=[1,168],$V01=[1,169],$V11=[1,211],$V21=[1,225],$V31=[18,19,49,51,61,62,63,64,65,66,69,70,84],$V41=[18,19,49,51,52,53,55,61,62,63,64,65,66,69,70,84],$V51=[1,273],$V61=[1,274],$V71=[1,284],$V81=[1,283],$V91=[15,83,85],$Va1=[1,312],$Vb1=[1,310],$Vc1=[1,311],$Vd1=[1,315],$Ve1=[18,49],$Vf1=[1,327];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"asignacion":8,"declaracion_asignacion":9,"declaracion_funcion":10,"declaracion_metodo":11,"RCLASS":12,"ID":13,"LLAVIZQ":14,"LLAVDER":15,"PARIZQ":16,"lista_parametros":17,"PARDER":18,"PUNTOYCOMA":19,"RSYSTEM":20,"PUNTO":21,"ROUT":22,"RPRINT":23,"salida":24,"RPRINTLN":25,"bloque_if":26,"bloque_switch":27,"bloque_while":28,"bloque_dowhile":29,"bloque_for":30,"sentencias_transferencia":31,"lista_id":32,"COMA":33,"RINT":34,"RDOUBLE":35,"RBOOLEAN":36,"RCHAR":37,"RSTRING":38,"IGUAL":39,"expresion_cadena":40,"expresion_numerica":41,"expresion_logica":42,"CARACTER":43,"asignacion_simple":44,"declaracion_asignacion_simple":45,"parametros":46,"RVOID":47,"RMAIN":48,"OPMAS":49,"CADENA":50,"OPMENOS":51,"OPDIVISION":52,"OPMOD":53,"OPCIRCU":54,"OPMULTI":55,"ENTERO":56,"DECIMAL":57,"DECREMENTO":58,"INCREMENTO":59,"expresion_relacional":60,"MAYOR":61,"MENOR":62,"MAYORIG":63,"MENORIG":64,"DIGUAL":65,"NIGUAL":66,"RTRUE":67,"RFALSE":68,"AND":69,"OR":70,"NOT":71,"incremento_decremento":72,"RBREAK":73,"RCONTINUE":74,"RRETURN":75,"tipo":76,"RIF":77,"bloque_else":78,"RELSE":79,"RSWITCH":80,"casos":81,"caso":82,"RCASE":83,"DOSPUNTOS":84,"RDEFAULT":85,"RWHILE":86,"RDO":87,"RFOR":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"RCLASS",13:"ID",14:"LLAVIZQ",15:"LLAVDER",16:"PARIZQ",18:"PARDER",19:"PUNTOYCOMA",20:"RSYSTEM",21:"PUNTO",22:"ROUT",23:"RPRINT",25:"RPRINTLN",33:"COMA",34:"RINT",35:"RDOUBLE",36:"RBOOLEAN",37:"RCHAR",38:"RSTRING",39:"IGUAL",43:"CARACTER",47:"RVOID",48:"RMAIN",49:"OPMAS",50:"CADENA",51:"OPMENOS",52:"OPDIVISION",53:"OPMOD",54:"OPCIRCU",55:"OPMULTI",56:"ENTERO",57:"DECIMAL",58:"DECREMENTO",59:"INCREMENTO",61:"MAYOR",62:"MENOR",63:"MAYORIG",64:"MENORIG",65:"DIGUAL",66:"NIGUAL",67:"RTRUE",68:"RFALSE",69:"AND",70:"OR",71:"NOT",73:"RBREAK",74:"RCONTINUE",75:"RRETURN",77:"RIF",79:"RELSE",80:"RSWITCH",83:"RCASE",84:"DOSPUNTOS",85:"RDEFAULT",86:"RWHILE",87:"RDO",88:"RFOR"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,5],[6,5],[6,4],[6,9],[6,9],[6,8],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[32,3],[32,1],[7,3],[7,3],[7,3],[7,3],[7,3],[8,4],[8,4],[8,4],[9,5],[9,5],[9,5],[9,5],[9,5],[44,2],[45,4],[10,8],[10,8],[10,8],[10,8],[10,8],[10,7],[10,7],[10,7],[10,7],[10,7],[11,8],[11,8],[11,7],[11,7],[40,3],[40,1],[41,2],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,1],[41,1],[41,1],[41,2],[41,2],[41,2],[41,2],[41,2],[41,2],[41,2],[41,2],[41,2],[41,2],[41,2],[41,2],[60,3],[60,3],[60,3],[60,3],[60,3],[60,3],[60,1],[60,1],[42,3],[42,3],[42,2],[42,3],[42,5],[42,5],[42,1],[72,2],[72,2],[72,2],[72,2],[31,2],[31,2],[31,2],[31,3],[31,3],[31,3],[31,3],[46,4],[46,2],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[76,1],[76,1],[76,1],[76,1],[76,1],[24,3],[24,3],[24,6],[24,5],[24,1],[24,1],[24,4],[24,3],[26,7],[26,8],[78,4],[78,8],[78,9],[27,7],[81,2],[81,1],[82,4],[82,3],[28,7],[29,9],[30,11],[30,11]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6:
this.$=$$[$0]
break;
case 9:
this.$=AST_Tools.bloqueCLASE($$[$0-3],$$[$0-1]);
break;
case 10:
this.$=AST_Tools.llamadaFuncion($$[$0-4],$$[$0-2]);
break;
case 11:
this.$=AST_Tools.llamadaFuncion($$[$0-3],undefined);
break;
case 12: case 13:
this.$=AST_Tools.sentenciaPrint($$[$0-2]);
break;
case 14:
this.$=AST_Tools.sentenciaPrint("\n");
break;
case 21:
 console.error('Error sint√°ctico: || ' + yytext + ' || en la linea: ' + this._$.first_line + ', y columna: ' + this._$.first_column); 
break;
case 22:
$$[$0-2].push($$[$0]);
break;
case 23:
this.$=AST_Tools.listaID($$[$0]);
break;
case 24:
 this.$ = AST_Tools.declaracion($$[$0-1], Tipo_Valor.NUMERO); 
break;
case 25:
 this.$ = AST_Tools.declaracion($$[$0-1], Tipo_Valor.DECIMAL); 
break;
case 26:
 this.$ = AST_Tools.declaracion($$[$0-1], Tipo_Valor.BOOLEANO); 
break;
case 27:
 this.$ = AST_Tools.declaracion($$[$0-1], Tipo_Valor.CARACTER); 
break;
case 28:
 this.$ = AST_Tools.declaracion($$[$0-1], Tipo_Valor.CADENA); 
break;
case 29: case 30: case 31:
 this.$ = AST_Tools.asignacion($$[$0-3], $$[$0-1]); 
break;
case 32:
 this.$ = AST_Tools.asignacion_declaracion($$[$0-1],$$[$0-3], Tipo_Valor.NUMERO);
break;
case 33:
 this.$ = AST_Tools.asignacion_declaracion($$[$0-1],$$[$0-3], Tipo_Valor.DECIMAL);
break;
case 34:
 this.$ = AST_Tools.asignacion_declaracion($$[$0-1],$$[$0-3], Tipo_Valor.BOOLEANO);
break;
case 35:
 this.$ = AST_Tools.asignacion_declaracion($$[$0-1],$$[$0-3], Tipo_Valor.CARACTER);
break;
case 36:
 this.$ = AST_Tools.asignacion_declaracion($$[$0-1],$$[$0-3], Tipo_Valor.CADENA);
break;
case 37:
 this.$ = AST_Tools.asignacion($$[$0-1], $$[$01]); 
break;
case 38:
 this.$ = AST_Tools.asignacion_declaracion($$[$0-2], Tipo_Valor.NUMERO);
break;
case 39:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.NUMERO,$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 40:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.DECIMAL,$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 41:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.BOOLEANO,$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 42:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.CARACTER,$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 43:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.CADENA,$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 44:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.NUMERO,$$[$0-5],undefined,$$[$0-1]);
break;
case 45:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.DECIMAL,$$[$0-5],undefined,$$[$0-1]);
break;
case 46:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.BOOLEANO,$$[$0-5],undefined,$$[$0-1]);
break;
case 47:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.CARACTER,$$[$0-5],undefined,$$[$0-1]);
break;
case 48:
 this.$ = AST_Tools.nuevaFuncion(Tipo_Valor.CADENA,$$[$0-5],undefined,$$[$0-1]);
break;
case 49:
 this.$ = AST_Tools.nuevoMetodo($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 50:
 this.$ = AST_Tools.nuevoMetodoMain($$[$0-4],$$[$0-1]);
break;
case 51:
 this.$ = AST_Tools.nuevoMetodo($$[$0-5],undefined,$$[$0-1]);
break;
case 52:
 this.$ = AST_Tools.nuevoMetodoMain(undefined,$$[$0-1]);
break;
case 53:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.CONCATENACION);
break;
case 54:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.CADENA); 
break;
case 55:
 this.$ = AST_Tools.operacionUnaria ($$[$0], Tipo_Operacion.NEGATIVO); 
break;
case 56:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.RESTA);
break;
case 57:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.SUMA);
break;
case 58:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.DIVISON);
break;
case 59:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MODULO);
break;
case 60:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.POTENCIA);
break;
case 61:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MULTIPLICACION);
break;
case 62:
 this.$ = $$[$0-1]; 
break;
case 63:
 this.$ = AST_Tools.crearValor(Number($$[$0]),Tipo_Valor.NUMERO); 
break;
case 64:
 this.$ = AST_Tools.crearValor(Number($$[$0]),Tipo_Valor.DECIMAL); 
break;
case 65:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.ID); 
break;
case 66: case 67:
 this.$ = AST_Tools.operacionUnaria (Number($$[$0]), Tipo_Operacion.DECREMENTO); 
break;
case 68: case 93:
 this.$ = AST_Tools.operacionUnaria ($$[$0], Tipo_Operacion.DECREMENTO); 
break;
case 69: case 70:
 this.$ = AST_Tools.operacionUnaria (Number($$[$0]), Tipo_Operacion.INCREMENTO); 
break;
case 71: case 94:
 this.$ = AST_Tools.operacionUnaria ($$[$0], Tipo_Operacion.INCREMENTO); 
break;
case 72: case 95:
 this.$ = AST_Tools.operacionUnaria ($$[$0-1], Tipo_Operacion.DECREMENTO); 
break;
case 73: case 74:
 this.$ = AST_Tools.operacionUnaria (Number($$[$0-1]), Tipo_Operacion.DECREMENTO); 
break;
case 75: case 96:
 this.$ = AST_Tools.operacionUnaria ($$[$0-1], Tipo_Operacion.INCREMENTO); 
break;
case 76: case 77:
 this.$ = AST_Tools.operacionUnaria (Number($$[$0-1]), Tipo_Operacion.INCREMENTO); 
break;
case 78:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MAYOR_QUE);
break;
case 79:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MENOR_QUE);
break;
case 80:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MAYOR_IGUAL);
break;
case 81:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MENOR_IGUAL);
break;
case 82:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.DOBLE_IGUAL);
break;
case 83:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.NO_IGUAL);
break;
case 84: case 85:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.BOOLEANO);
break;
case 86:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.AND);
break;
case 87:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.OR);
break;
case 88:
 this.$ = AST_Tools.operacionUnaria ($$[$0],Tipo_Operacion.NOT);
break;
case 89:
 this.$ = $$[$0-1]
break;
case 90:
 this.$ = AST_Tools.operacionBinaria($$[$0-3], $$[$0], Tipo_Operacion.OR);
break;
case 91:
 this.$ = AST_Tools.operacionBinaria($$[$0-3], $$[$0], Tipo_Operacion.AND);
break;
case 92:
 this.$ = $$[$0]
break;
case 97:
this.$=AST_Tools.nuevoBREAK();
break;
case 98:
this.$=AST_Tools.nuevoCONTINUE();
break;
case 99:
this.$=AST_Tools.nuevoRETURN(undefined,undefined);
break;
case 100:
this.$=AST_Tools.nuevoCONTINUE($$[$0-1],Tipo_Valor.BOOLEANO);
break;
case 101:
this.$=AST_Tools.nuevoCONTINUE($$[$0-1],Tipo_Valor.NUMERO);
break;
case 102:
this.$=AST_Tools.nuevoCONTINUE($$[$0-1],Tipo_Valor.CADENA);
break;
case 103:
this.$=AST_Tools.nuevoCONTINUE($$[$0-1],Tipo_Valor.CARACTER);
break;
case 104:
$$[$0-3].push(AST_Tools.nuevoParametro($$[$0-1],$$[$0]));
break;
case 105:
this.$=AST_Tools.listaParametros(AST_Tools.nuevoParametro($$[$0-1],$$[$0]));
break;
case 106:
$$[$0-2].push(AST_Tools.nuevoParametro(Tipo_Valor.ID,$$[$0]));
break;
case 107:
$$[$0-2].push(AST_Tools.nuevoParametro(Tipo_Valor.NUMERO,$$[$0]));
break;
case 108:
$$[$0-2].push(AST_Tools.nuevoParametro(Tipo_Valor.DECIMAL,$$[$0]));
break;
case 109:
$$[$0-2].push(AST_Tools.nuevoParametro(Tipo_Valor.CARACTER,$$[$0]));
break;
case 110:
$$[$0-2].push(AST_Tools.nuevoParametro(Tipo_Valor.CADENA,$$[$0]));
break;
case 111: case 112:
$$[$0-2].push(AST_Tools.nuevoParametro(Tipo_Valor.BOOLEANO,$$[$0]));
break;
case 113:
this.$=AST_Tools.listaParametros(AST_Tools.nuevoParametro(Tipo_Valor.ID,$$[$0]));
break;
case 114:
this.$=AST_Tools.listaParametros(AST_Tools.nuevoParametro(Tipo_Valor.NUMERO,$$[$0]));
break;
case 115:
this.$=AST_Tools.listaParametros(AST_Tools.nuevoParametro(Tipo_Valor.DECIMAL,$$[$0]));
break;
case 116:
this.$=AST_Tools.listaParametros(AST_Tools.nuevoParametro(Tipo_Valor.CARACTER,$$[$0]));
break;
case 117:
this.$=AST_Tools.listaParametros(AST_Tools.nuevoParametro(Tipo_Valor.CADENA,$$[$0]));
break;
case 118: case 119:
this.$=AST_Tools.listaParametros(AST_Tools.nuevoParametro(Tipo_Valor.BOOLEANO,$$[$0]));
break;
case 120:
this.$=Tipo_Valor.NUMERO;
break;
case 121:
this.$=Tipo_Valor.DECIMAL;
break;
case 122:
this.$=Tipo_Valor.BOOLEANO;
break;
case 123:
this.$=Tipo_Valor.CARACTER;
break;
case 124:
this.$=Tipo_Valor.CADENA;
break;
case 125:
$$[$0-2].push(AST_Tools.salida(Tipo_Valor.CADENA,$$[$0]));
break;
case 126:
$$[$0-2].push(AST_Tools.salida(Tipo_Valor.ID,$$[$0]));
break;
case 127:
$$[$0-5].push(AST_Tools.llamadaFuncion($$[$0-3],$$[$0-1]));
break;
case 128:
$$[$0-4].push(AST_Tools.llamadaFuncion($$[$0-2],undefined));
break;
case 129:
this.$=AST_Tools.listaSalidas(AST_Tools.salida(Tipo_Valor.CADENA,$$[$0]));
break;
case 130:
this.$=AST_Tools.listaSalidas(AST_Tools.salida(Tipo_Valor.ID,$$[$0]));
break;
case 131:
this.$=AST_Tools.listaSalidas(AST_Tools.llamadaFuncion($$[$0-3],$$[$0-1]));
break;
case 132:
this.$=AST_Tools.listaSalidas(AST_Tools.llamadaFuncion($$[$0-2],undefined));
break;
case 133: case 136:
this.$= AST_Tools.nuevoIF($$[$0-4],$$[$0-1]);
break;
case 134: case 137:
this.$= AST_Tools.nuevoIF_ELSE($$[$0-5],$$[$0-2],$$[$0])
break;
case 135:
this.$= $$[$0-1]
break;
case 138:
this.$=AST_Tools.nuevoSWITCH($$[$0-4],$$[$0-1]);
break;
case 139:
$$[$0-1].push($$[$0]);
break;
case 140:
this.$=AST_Tools.listaCasos($$[$0]);
break;
case 141:
this.$=AST_Tools.nuevoCaso($$[$0-2],$$[$0]);
break;
case 142:
this.$=AST_Tools.nuevoCasoDefault($$[$0]);
break;
case 143:
this.$= AST_Tools.nuevoWHILE($$[$0-4],$$[$0-1]);
break;
case 144:
this.$= AST_Tools.nuevoDO_WHILE($$[$0-3],$$[$0-6]);
break;
case 145: case 146:
this.$=AST_Tools.nuevoFOR($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{1:[3]},{2:$V0,5:[1,33],6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),{13:[1,35]},{16:[1,36],39:[1,37]},{21:[1,38]},o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),{13:[1,40],32:39},{13:[1,42],32:41},{13:[1,44],32:43},{13:[1,46],32:45},{13:[1,48],32:47},{13:[1,49],48:[1,50]},{16:[1,51]},{16:[1,52]},{16:[1,53]},{14:[1,54]},{16:[1,55]},{19:[1,56]},{19:[1,57]},{13:$Vj,16:$Vk,19:[1,58],40:61,41:60,42:59,43:[1,62],50:$Vl,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:63,67:$Vr,68:$Vs,71:$Vt},{1:[2,1]},o($Vi,[2,2]),{14:[1,75]},{13:$Vu,17:76,18:[1,77],43:$Vv,50:$Vw,56:$Vx,57:$Vy,67:$Vz,68:$VA},{13:$Vj,16:$Vk,40:85,41:86,42:87,50:$Vl,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:63,67:$Vr,68:$Vs,71:$Vt},{22:[1,88]},{19:[1,89],33:$VB,39:[1,90]},o($VC,$VD,{16:[1,92]}),{19:[1,93],33:$VB,39:[1,94]},o($VC,$VD,{16:[1,95]}),{19:[1,96],33:$VB,39:[1,97]},o($VC,$VD,{16:[1,98]}),{19:[1,99],33:$VB,39:[1,100]},o($VC,$VD,{16:[1,101]}),{19:[1,102],33:$VB,39:[1,103]},o($VC,$VD,{16:[1,104]}),{16:[1,105]},{16:[1,106]},{13:$Vj,16:$Vk,41:108,42:107,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:63,67:$Vr,68:$Vs,71:$Vt},{13:$Vj,16:$VE,41:109,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{13:$Vj,16:$Vk,41:108,42:111,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:63,67:$Vr,68:$Vs,71:$Vt},{2:$V0,4:112,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{13:[1,115],34:[1,116],44:113,45:114},o($Vi,[2,97]),o($Vi,[2,98]),o($Vi,[2,99]),{19:[1,117]},{19:[1,118],49:$VF,51:$VG,52:$VH,53:$VI,54:$VJ,55:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},{19:[1,131],49:$VR},{19:[1,133]},o($VS,[2,92],{69:[1,134],70:[1,135]}),{13:$Vj,16:$Vk,41:108,42:136,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:63,67:$Vr,68:$Vs,71:$Vt},{13:$Vj,16:$Vk,41:138,42:137,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:63,67:$Vr,68:$Vs,71:$Vt},{13:$Vj,16:$VE,41:139,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},o($VT,[2,63],{58:[1,140],59:[1,141]}),o($VT,[2,64],{58:[1,142],59:[1,143]}),o($VT,[2,65],{58:[1,144],59:[1,145]}),{13:[1,148],56:[1,146],57:[1,147]},{13:[1,151],56:[1,149],57:[1,150]},o($VU,[2,54]),o($VV,[2,84]),o($VV,[2,85]),{2:$V0,4:152,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{18:[1,153],33:$VW},{19:[1,155]},o($VX,[2,113]),o($VX,[2,114]),o($VX,[2,115]),o($VX,[2,116]),o($VX,[2,117]),o($VX,[2,118]),o($VX,[2,119]),{19:[1,156],49:$VR},{19:[1,157],49:$VF,51:$VG,52:$VH,53:$VI,54:$VJ,55:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},{19:[1,158]},{21:[1,159]},o($Vi,[2,24]),{13:$Vj,16:$VE,41:160,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{13:[1,161]},{18:[1,163],34:$VY,35:$VZ,36:$V_,37:$V$,38:$V01,46:162,76:164},o($Vi,[2,25]),{13:$Vj,16:$VE,41:170,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{18:[1,172],34:$VY,35:$VZ,36:$V_,37:$V$,38:$V01,46:171,76:164},o($Vi,[2,26]),{13:$Vj,16:$Vk,41:108,42:173,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:63,67:$Vr,68:$Vs,71:$Vt},{18:[1,175],34:$VY,35:$VZ,36:$V_,37:$V$,38:$V01,46:174,76:164},o($Vi,[2,27]),{43:[1,176]},{18:[1,178],34:$VY,35:$VZ,36:$V_,37:$V$,38:$V01,46:177,76:164},o($Vi,[2,28]),{40:179,50:$Vl},{18:[1,181],34:$VY,35:$VZ,36:$V_,37:$V$,38:$V01,46:180,76:164},{18:[1,183],34:$VY,35:$VZ,36:$V_,37:$V$,38:$V01,46:182,76:164},{18:[1,185],34:$VY,35:$VZ,36:$V_,37:$V$,38:$V01,46:184,76:164},{18:[1,186]},{49:$VF,51:$VG,52:$VH,53:$VI,54:$VJ,55:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},{18:[1,187],49:$VF,51:$VG,52:$VH,53:$VI,54:$VJ,55:$VK},{13:$Vj,16:$VE,41:188,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{18:[1,189]},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,190],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{19:[1,191]},{19:[1,192]},{13:$Vj,16:$VE,41:193,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{13:[1,194]},o($Vi,[2,100]),o($Vi,[2,101]),{13:$Vj,16:$VE,41:195,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{13:$Vj,16:$VE,41:196,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{13:$Vj,16:$VE,41:197,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{13:$Vj,16:$VE,41:198,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{13:$Vj,16:$VE,41:199,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{13:$Vj,16:$VE,41:200,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{13:$Vj,16:$VE,41:201,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{13:$Vj,16:$VE,41:202,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{13:$Vj,16:$VE,41:203,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{13:$Vj,16:$VE,41:204,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{13:$Vj,16:$VE,41:205,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{13:$Vj,16:$VE,41:206,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},o($Vi,[2,102]),{40:207,50:$Vl},o($Vi,[2,103]),{13:$Vj,16:$VE,41:108,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:208,67:$Vr,68:$Vs},{13:$Vj,16:$VE,41:108,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:209,67:$Vr,68:$Vs},o($VS,[2,88]),{18:[1,210]},{18:$V11,49:$VF,51:$VG,52:$VH,53:$VI,54:$VJ,55:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ},o($VT,[2,55]),o($VT,[2,73]),o($VT,[2,76]),o($VT,[2,74]),o($VT,[2,77]),o($VT,[2,72]),o($VT,[2,75]),o($VT,[2,66]),o($VT,[2,67]),o($VT,[2,68]),o($VT,[2,69]),o($VT,[2,70]),o($VT,[2,71]),{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,212],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{19:[1,213]},{13:[1,214],43:[1,217],50:[1,218],56:[1,215],57:[1,216],67:[1,219],68:[1,220]},o($Vi,[2,11]),o($Vi,[2,29]),o($Vi,[2,30]),o($Vi,[2,31]),{23:[1,221],25:[1,222]},{19:[1,223],49:$VF,51:$VG,52:$VH,53:$VI,54:$VJ,55:$VK},o($VC,[2,22]),{18:[1,224],33:$V21},{14:[1,226]},{13:[1,227]},{13:[2,120]},{13:[2,121]},{13:[2,122]},{13:[2,123]},{13:[2,124]},{19:[1,228],49:$VF,51:$VG,52:$VH,53:$VI,54:$VJ,55:$VK},{18:[1,229],33:$V21},{14:[1,230]},{19:[1,231]},{18:[1,232],33:$V21},{14:[1,233]},{19:[1,234]},{18:[1,235],33:$V21},{14:[1,236]},{19:[1,237],49:$VR},{18:[1,238],33:$V21},{14:[1,239]},{18:[1,240],33:$V21},{14:[1,241]},{18:[1,242],33:$V21},{14:[1,243]},{14:[1,244]},{14:[1,245]},{18:$V11,49:$VF,51:$VG,52:$VH,53:$VI,54:$VJ,55:$VK},{14:[1,246]},{86:[1,247]},{13:$Vj,16:$Vk,41:108,42:248,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:63,67:$Vr,68:$Vs,71:$Vt},{13:$Vj,16:$Vk,41:108,42:249,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:63,67:$Vr,68:$Vs,71:$Vt},{19:[2,37],49:$VF,51:$VG,52:$VH,53:$VI,54:$VJ,55:$VK},{39:[1,250]},o($V31,[2,56],{52:$VH,53:$VI,54:$VJ,55:$VK}),o($V31,[2,57],{52:$VH,53:$VI,54:$VJ,55:$VK}),o($V41,[2,58],{54:$VJ}),o($V41,[2,59],{54:$VJ}),o($VT,[2,60]),o($V41,[2,61],{54:$VJ}),o($VV,[2,78],{49:$VF,51:$VG,52:$VH,53:$VI,54:$VJ,55:$VK}),o($VV,[2,79],{49:$VF,51:$VG,52:$VH,53:$VI,54:$VJ,55:$VK}),o($VV,[2,80],{49:$VF,51:$VG,52:$VH,53:$VI,54:$VJ,55:$VK}),o($VV,[2,81],{49:$VF,51:$VG,52:$VH,53:$VI,54:$VJ,55:$VK}),o($VV,[2,82],{49:$VF,51:$VG,52:$VH,53:$VI,54:$VJ,55:$VK}),o($VV,[2,83],{49:$VF,51:$VG,52:$VH,53:$VI,54:$VJ,55:$VK}),o($VU,[2,53]),o($VS,[2,86]),o($VS,[2,87]),o($VS,[2,89],{69:[1,252],70:[1,251]}),o($VT,[2,62]),o($Vi,[2,9]),o($Vi,[2,10]),o($VX,[2,106]),o($VX,[2,107]),o($VX,[2,108]),o($VX,[2,109]),o($VX,[2,110]),o($VX,[2,111]),o($VX,[2,112]),{16:[1,253]},{16:[1,254]},o($Vi,[2,32]),{14:[1,255]},{34:$VY,35:$VZ,36:$V_,37:$V$,38:$V01,76:256},{2:$V0,4:257,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},o($VX,[2,105]),o($Vi,[2,33]),{14:[1,258]},{2:$V0,4:259,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},o($Vi,[2,34]),{14:[1,260]},{2:$V0,4:261,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},o($Vi,[2,35]),{14:[1,262]},{2:$V0,4:263,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},o($Vi,[2,36]),{14:[1,264]},{2:$V0,4:265,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{14:[1,266]},{2:$V0,4:267,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{14:[1,268]},{2:$V0,4:269,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{2:$V0,4:270,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{81:271,82:272,83:$V51,85:$V61},{2:$V0,4:275,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{16:[1,276]},{19:[1,277]},{19:[1,278]},{13:$Vj,16:$VE,41:279,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{13:$Vj,16:$Vk,41:108,42:280,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:63,67:$Vr,68:$Vs,71:$Vt},{13:$Vj,16:$Vk,41:108,42:281,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:63,67:$Vr,68:$Vs,71:$Vt},{13:$V71,24:282,50:$V81},{13:$V71,18:[1,286],24:285,50:$V81},{2:$V0,4:287,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{13:[1,288]},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,289],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{2:$V0,4:290,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,291],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{2:$V0,4:292,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,293],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{2:$V0,4:294,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,295],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{2:$V0,4:296,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,297],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{2:$V0,4:298,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,299],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{2:$V0,4:300,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,301],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,302],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{15:[1,303],82:304,83:$V51,85:$V61},o($V91,[2,140]),{13:$Vj,16:$VE,41:305,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq},{84:[1,306]},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,307],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{13:$Vj,16:$Vk,41:108,42:308,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:63,67:$Vr,68:$Vs,71:$Vt},{13:$Va1,58:$Vb1,59:$Vc1,72:309},{13:$Va1,58:$Vb1,59:$Vc1,72:313},{19:[2,38],49:$VF,51:$VG,52:$VH,53:$VI,54:$VJ,55:$VK},o($VS,[2,90]),o($VS,[2,91]),{18:[1,314],49:$Vd1},o($Ve1,[2,129]),o($Ve1,[2,130],{16:[1,316]}),{18:[1,317],49:$Vd1},{19:[1,318]},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,319],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},o($VX,[2,104]),o($Vi,[2,44]),{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,320],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},o($Vi,[2,45]),{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,321],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},o($Vi,[2,46]),{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,322],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},o($Vi,[2,47]),{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,323],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},o($Vi,[2,48]),{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,324],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},o($Vi,[2,51]),{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,325],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},o($Vi,[2,52]),o($Vi,[2,133],{78:326,79:$Vf1}),o($Vi,[2,138]),o($V91,[2,139]),{49:$VF,51:$VG,52:$VH,53:$VI,54:$VJ,55:$VK,84:[1,328]},{2:$V0,4:329,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},o($Vi,[2,143]),{18:[1,330]},{18:[1,331]},{13:[1,332]},{13:[1,333]},{58:[1,334],59:[1,335]},{18:[1,336]},{19:[1,337]},{13:[1,339],50:[1,338]},{13:$Vu,17:340,18:[1,341],43:$Vv,50:$Vw,56:$Vx,57:$Vy,67:$Vz,68:$VA},{19:[1,342]},o($Vi,[2,14]),o($Vi,[2,39]),o($Vi,[2,40]),o($Vi,[2,41]),o($Vi,[2,42]),o($Vi,[2,43]),o($Vi,[2,49]),o($Vi,[2,50]),o($Vi,[2,134]),{14:[1,343],77:[1,344]},{2:$V0,4:345,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},o($V91,[2,142],{7:4,8:5,9:6,10:7,11:8,26:12,27:13,28:14,29:15,30:16,31:17,6:34,2:$V0,12:$V1,13:$V2,20:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh}),{19:[1,346]},{14:[1,347]},{18:[2,93]},{18:[2,94]},{18:[2,95]},{18:[2,96]},{14:[1,348]},o($Vi,[2,12]),o($Ve1,[2,125]),o($Ve1,[2,126],{16:[1,349]}),{18:[1,350],33:$VW},o($Ve1,[2,132]),o($Vi,[2,13]),{2:$V0,4:351,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{16:[1,352]},o($V91,[2,141],{7:4,8:5,9:6,10:7,11:8,26:12,27:13,28:14,29:15,30:16,31:17,6:34,2:$V0,12:$V1,13:$V2,20:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh}),o($Vi,[2,144]),{2:$V0,4:353,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{2:$V0,4:354,6:3,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{13:$Vu,17:355,18:[1,356],43:$Vv,50:$Vw,56:$Vx,57:$Vy,67:$Vz,68:$VA},o($Ve1,[2,131]),{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,357],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{13:$Vj,16:$Vk,41:108,42:358,51:$Vm,56:$Vn,57:$Vo,58:$Vp,59:$Vq,60:63,67:$Vr,68:$Vs,71:$Vt},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,359],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,15:[1,360],20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{18:[1,361],33:$VW},o($Ve1,[2,128]),o($Vi,[2,135]),{18:[1,362]},o($Vi,[2,145]),o($Vi,[2,146]),o($Ve1,[2,127]),{14:[1,363]},{2:$V0,6:364,7:4,8:5,9:6,10:7,11:8,12:$V1,13:$V2,20:$V3,26:12,27:13,28:14,29:15,30:16,31:17,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,47:$V9,73:$Va,74:$Vb,75:$Vc,77:$Vd,80:$Ve,86:$Vf,87:$Vg,88:$Vh},{15:[1,365]},o($Vi,[2,136],{78:366,79:$Vf1}),o($Vi,[2,137])],
defaultActions: {33:[2,1],165:[2,120],166:[2,121],167:[2,122],168:[2,123],169:[2,124],332:[2,93],333:[2,94],334:[2,95],335:[2,96]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Tipo_Operacion	= require('./instrucciones.js').Tipo_Operacion;
	const Tipo_Valor 	    = require('./instrucciones.js').Tipo_Valor;
	const AST_Tools     	= require('./instrucciones.js').AST_Tools;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"lex":true,"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ingorar Espacion */
break;
case 1:/* Comentario Simple */
break;
case 2:/* Comentario Multiple */
break;
case 3:return 34;
break;
case 4:return 35;
break;
case 5:return 36;
break;
case 6:return 37;
break;
case 7:return 38;
break;
case 8:return 52;
break;
case 9:return 55;
break;
case 10:return 53;
break;
case 11:return 58;
break;
case 12:return 51;
break;
case 13:return 59;
break;
case 14:return 49;
break;
case 15:return 54;
break;
case 16:return 16;
break;
case 17:return 18;
break;
case 18:return 14;
break;
case 19:return 15;
break;
case 20:return 64;
break;
case 21:return 63;
break;
case 22:return 62;
break;
case 23:return 61;
break;
case 24:return 65;
break;
case 25:return 39;
break;
case 26:return 66;
break;
case 27:return 71;
break;
case 28:return 19;
break;
case 29:return 33;
break;
case 30:return 84;
break;
case 31:return 69;
break;
case 32:return 70;
break;
case 33:return 12;
break;
case 34:return 'RIMPORT';
break;
case 35:return 67;
break;
case 36:return 68;
break;
case 37:return 77;
break;
case 38:return 79;
break;
case 39:return 80;
break;
case 40:return 83;
break;
case 41:return 85;
break;
case 42:return 86;
break;
case 43:return 87;
break;
case 44:return 88;
break;
case 45:return 73;
break;
case 46:return 74;
break;
case 47:return 75;
break;
case 48:return 47;
break;
case 49:return 48;
break;
case 50:return 20;
break;
case 51:return 21;
break;
case 52:return 22;
break;
case 53:return 23;
break;
case 54:return 25;
break;
case 55:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 43;
break;
case 56:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 50;
break;
case 57:return 56;
break;
case 58:return 57;
break;
case 59:return 13;
break;
case 60:return 5;
break;
case 61:return 'INVALID';
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][\*][^\*]*[\*][\/])/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:\/)/,/^(?:\*)/,/^(?:%)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:!)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:System\b)/,/^(?:\.)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:'[^\']')/,/^(?:"[^\"]*")/,/^(?:[0-9]+\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z])[a-zA-Z_0-9]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}